// Code generated by "tfplugingen -gen provider -type provider"; DO NOT EDIT.

package main

import (
	"fmt"
	terraformpluginsdk "github.com/hashicorp/terraform-plugin-sdk"
	cty "github.com/zclconf/go-cty/cty"
)

func (r *provider) Schema() terraformpluginsdk.Schema {
	return terraformpluginsdk.Schema{Block: terraformpluginsdk.Block{Attributes: []terraformpluginsdk.Attribute{}}}
}
func (r *provider) UnmarshalState(conf cty.Value) error {
	var err error
	_ = err
	if !conf.IsNull() && conf.IsKnown() {
	}
	return nil
}
func (r *provider) MarshalState() (cty.Value, error) {
	var err error
	_ = err
	var state cty.Value
	{
		state1 := map[string]cty.Value{}
		state = cty.ObjectVal(state1)
	}
	return state, nil
}

type resourceFactory func(*provider) terraformpluginsdk.Resource

var resourceFactories = map[string]resourceFactory{}

func (p *provider) ResourceFactory(typeName string) terraformpluginsdk.Resource {
	if f, ok := resourceFactories[typeName]; ok {
		return f(p)
	}
	panic(fmt.Sprintf("resource %s unexpected", typeName))
}
func (p *provider) ResourceSchemas() map[string]terraformpluginsdk.Schema {
	m := map[string]terraformpluginsdk.Schema{}
	for n, f := range resourceFactories {
		r := f(p)
		m[n] = r.Schema()
	}
	return m
}

type dataSourceFactory func(*provider) terraformpluginsdk.DataSource

var dataSourceFactories = map[string]dataSourceFactory{}

func (p *provider) DataSourceFactory(typeName string) terraformpluginsdk.DataSource {
	if f, ok := dataSourceFactories[typeName]; ok {
		return f(p)
	}
	panic(fmt.Sprintf("dataSource %s unexpected", typeName))
}
func (p *provider) DataSourceSchemas() map[string]terraformpluginsdk.Schema {
	m := map[string]terraformpluginsdk.Schema{}
	for n, f := range dataSourceFactories {
		r := f(p)
		m[n] = r.Schema()
	}
	return m
}
