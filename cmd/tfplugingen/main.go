package main // import "github.com/hashicorp/terraform-plugin-sdk/cmd/tfplugingen"

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"go/token"
	"go/types"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/dave/jennifer/jen"
	"github.com/pkg/errors"
	"golang.org/x/tools/go/packages"
)

var (
	mode         = flag.String("gen", "", "plugin generation type; must be set")
	typeName     = flag.String("type", "", "type name; must be set")
	resourceName = flag.String("name", "", "resource / data source name; must be set for resources and data sources")
	output       = flag.String("output", "", "output file name; default srcdir/<source file>.generated.go")
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of tfplugingen:\n")
	fmt.Fprintf(os.Stderr, "\ttfplugingen [flags] -type T [directory]\n")
	fmt.Fprintf(os.Stderr, "\ttfplugingen [flags] -type T files... # Must be a single package\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("tfplugingen: ")
	flag.Usage = Usage
	flag.Parse()
	if *mode == "" {
		flag.Usage()
		os.Exit(2)
	}
	if *typeName == "" {
		flag.Usage()
		os.Exit(2)
	}

	// We accept either one directory or a list of files. Which do we have?
	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	// Parse the package once.
	var dir string
	g := Generator{
		resourceName: *resourceName,
	}
	// TODO(suzmue): accept other patterns for packages (directories, list of files, import paths, etc).
	if len(args) == 1 && isDirectory(args[0]) {
		dir = args[0]
	} else {
		dir = filepath.Dir(args[0])
	}

	g.typeName = *typeName
	g.parsePackage(args)

	outputName := *output
	if outputName == "" {
		var baseName string
		dir, baseName = filepath.Split(g.pkg.Fset.File(g.pos).Name())
		baseName = strings.TrimSuffix(baseName, ".go") + ".generated.go"
		outputName = filepath.Join(dir, baseName)
	}

	g.File = jen.NewFile(g.pkg.Name)
	g.HeaderComment(fmt.Sprintf("// Code generated by \"tfplugingen %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " ")))

	var err error
	switch *mode {
	case "provider":
		err = g.generateProvider()
	case "resource":
		err = g.generateResource()
	case "datasource":
		err = g.generateDataSource()
	default:
		err = errors.Errorf("unexpected mode: %s", *mode)
	}
	if err != nil {
		log.Fatalf("error generating code: %+v", err)
	}

	// Format the output.
	src := g.format()

	// Write to file.
	err = ioutil.WriteFile(outputName, src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

// isDirectory reports whether the named file is a directory.
func isDirectory(name string) bool {
	info, err := os.Stat(name)
	if err != nil {
		log.Fatal(err)
	}
	return info.IsDir()
}

// Generator holds the state of the analysis. Primarily used to buffer
// the output for format.Source.
type Generator struct {
	*jen.File

	typeName string

	pkg    *packages.Package
	sdkPkg *packages.Package

	resourceName string

	typesNamed  *types.Named
	typesStruct *types.Struct

	pos token.Pos
}

// parsePackage analyzes the single package constructed from the patterns.
// parsePackage exits if there is an error.
func (g *Generator) parsePackage(patterns []string) {
	cfg := &packages.Config{
		Mode: packages.LoadSyntax,
		// TODO: Need to think about constants in test files. Maybe write type_string_test.go
		// in a separate pass? For later.
		Tests: false,
	}
	pkgs, err := packages.Load(cfg, patterns...)
	if err != nil {
		log.Fatal(err)
	}
	if len(pkgs) != 1 {
		log.Fatalf("error: %d packages found", len(pkgs))
	}
	g.pkg = pkgs[0]
	g.sdkPkg = g.pkg.Imports["github.com/hashicorp/terraform-plugin-sdk"]
	if g.sdkPkg == nil {
		log.Fatalf("unable to find the SDK package in imports")
	}

	typeObj := g.pkg.Types.Scope().Lookup(g.typeName)
	if typeObj != nil {
		g.pos = typeObj.Pos()
		switch typeObj := typeObj.(type) {
		case *types.TypeName:
			if tn, ok := typeObj.Type().(*types.Named); ok {
				if st, ok := tn.Underlying().(*types.Struct); ok {
					g.typesNamed = tn
					g.typesStruct = st
				}
			}
		default:
			log.Fatalf("unexpected type passed, %T %#v", typeObj, typeObj)
		}
	}

	if g.typesStruct == nil {
		log.Fatalf("unable to find type %s in package", g.typeName)
	}
}

// format returns the gofmt-ed contents of the Generator's buffer.
func (g *Generator) format() []byte {
	buf := &bytes.Buffer{}
	err := g.Render(buf)
	if err != nil {
		log.Printf("warning: internal error: unable to render Go: %s", err)
		return buf.Bytes()
	}
	src, err := format.Source(buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return buf.Bytes()
	}
	return src
}
